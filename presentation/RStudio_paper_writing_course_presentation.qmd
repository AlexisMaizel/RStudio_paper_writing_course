---
title: "Rstudio in Data Science and Paper Writing"
author: "Gáspár Jékely"
format:
  revealjs: 
    theme: [default, custom.scss]  
    slide-number: false
    chalkboard: 
      buttons: false
    preview-links: auto
scrollable: true    
css: xaringan-themer-GJ.css
---

## Rule 1 -- avoid spaces in file names
```{r}
library(dplyr)
library(readr)
library(ggplot2)
library(ggpubr)
```

<br>
```{r}
#| eval=TRUE, echo=TRUE
list.files("../analysis/data")
```

<br>
```{r}
#| eval=TRUE, echo=TRUE
readxl::read_excel("../analysis/data/data - José - March 2024.xlsx")
```


## Rule 2 -- relative working directories

<br>
```{r}
#| eval=TRUE, echo=TRUE
getwd()
```

-   Never use absolute paths in your scripts, because they hinder sharing: no one else will have exactly the same directory configuration as you.

-   Keep all files associated with a project together — input data, R scripts, analytical results, figures. This is such a wise and common practice that RStudio has built-in support for this via Rprojects.

-   If you create a new Rproject, your working dir will in general be where you save the new project

-   Whenever you refer to a file with a relative path it will look for it in your wd.


```{r}
#| eval=TRUE, echo=TRUE
list.files()
```

## Read and preview data 1

```{r}
#| eval=TRUE, echo=TRUE
data_Jose <- readxl::read_excel("../analysis/data/data - José - March 2024.xlsx")
head(data_Jose)
glimpse(data_Jose)
str(data_Jose)
summary(data_Jose)
```

## Plot data - Jose

```{r}
#| eval=TRUE, echo=TRUE

plot_Jose1 <- data_Jose %>%
  ggplot(aes(x = genotype, y = length, fill = factor(Treatment, level=c('Control', 'ABA', 'Sulfate')), na.rm = TRUE)) +
  geom_boxplot() +
  theme_minimal() +
  scale_fill_manual(values = c("#D55E00", "#E69F00", "#cccccc")) +
  guides(fill = guide_legend(title = "Treatment")) 

plot_Jose1  
 
```

```{r}
#| eval=TRUE, echo=TRUE
library(ggplot2)
plot_Jose2 <- data_Jose %>%
  ggplot(aes(x = genotype, y = length, fill = factor(Treatment, level=c('Control', 'ABA', 'Sulfate')), na.rm = TRUE)) +
  geom_violin() +
  geom_point( position=position_jitterdodge(jitter.width = 0.3, dodge.width = 0.9), alpha = 0.5, size = 0.4) +
  scale_fill_manual(values = c("#D55E00", "#E69F00", "#aaaaaa", "#dddddd")) +
  guides(fill = guide_legend(title = "Treatment")) 
plot_Jose2
```

## Read and preview data 2

```{r}
#| eval=TRUE, echo=TRUE
data_Ashwini <- readxl::read_excel("../analysis/data/24_01_22qpcr_1 - ash pal.xlsx")
head(data_Ashwini)
glimpse(data_Ashwini)
str(data_Ashwini)
summary(data_Ashwini)
```



## Let's try to fix this...

```{r}
#| eval=TRUE, echo=TRUE
Gene <- c(rep("Nanog", 15), rep("oct4", 15), rep("sox2", 15),
  rep("Nestin", 15), rep("pax6", 15), rep("Foxg1", 15),
  rep("GAPDH", 15))
Gene

data_Ashwini$Gene <- Gene
head(data_Ashwini)
```


## Select only relevant columns and clean up names...

```{r}
library(janitor)
#| eval=TRUE, echo=TRUE
data_Ashwini_sel <- data_Ashwini %>%
  select(1:6) %>%
  janitor::clean_names()
data_Ashwini_sel
```

## Add mean and SD columns with group_by() and mutate()

```{r}
#| eval=TRUE, echo=TRUE
data_Ashwini_sel_M_SD <- data_Ashwini_sel %>%
  group_by(gene) %>%
  mutate(mean2dct = mean(x2_dct)) %>%
  mutate(sd2dct = sd(x2_dct))
data_Ashwini_sel_M_SD
```


## Change data type...

```{r}
#| eval=TRUE, echo=TRUE
data_Ashwini_sel_M_SD <- data_Ashwini_sel_M_SD %>%
  mutate(ct_value = as.double(ct_value))
data_Ashwini_sel_M_SD
```

## Plot data

```{r}
#| eval=TRUE, echo=TRUE
data_Ashwini_sel_M_SD %>%
  group_by(gene) %>%
  ggplot(aes(x = days, y = dt_ct, fill = gene )) +
  geom_boxplot()

data_Ashwini_sel_M_SD %>%
  ggplot(aes(x = ct_value)) +
  geom_histogram()

```
## Plot data

```{r}
#| eval=TRUE, echo=TRUE
plot_Ashwini_ct <- data_Ashwini_sel_M_SD %>%
  group_by(gene) %>%
  ggplot(aes(x = gene, y = ct_value, fill = gene )) +
  geom_boxplot(na.rm = TRUE) 
plot_Ashwini_ct

```

## Read and preview data 3

```{r}
#| eval=TRUE, echo=TRUE
data_Anchel <- readxl::read_excel("../analysis/data/240323 CIN Exp278 reporter assay - Anchel.xlsx")
head(data_Anchel)
glimpse(data_Anchel)
str(data_Anchel)
summary(data_Anchel)
```


## Save tidy data as source data for the plot/figure/paper

```{r}
#| echo=TRUE, eval=TRUE
write_csv2(data_Ashwini_sel_M_SD, "../manuscript/source_data/FigureX_Ashwini_source_data.csv")
# check
read_csv2("../manuscript/source_data/data_Ashwini_sel_M_SD.csv")
```


## Format plots with predefined complete ggplot2 themes

::: columns
::: {.column width=50%}
```{r}
#| echo=TRUE, eval=TRUE
plot_Jose1 +
  theme_dark()
plot_Jose1 +
  theme_bw()
plot_Jose1 +
  theme_linedraw()
```
:::
::: {.column width=50%}
```{r}
#| echo=TRUE, eval=TRUE
plot_Jose2 +
  theme_classic()
plot_Jose2 +
  theme_minimal()
plot_Jose2 +
  theme_light()
```
:::
:::


## Format plots with a common custom theme()

- Themes are a powerful way to customize the non-data components of your plots: i.e. titles, labels, fonts, background, gridlines, and legends.



```{r}
#| echo=TRUE, eval=TRUE
args(theme)
```


## Format plots with a common custom theme()

```{r}
#| echo=TRUE, eval=TRUE
theme_plots <- theme_minimal() +
  theme(
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    axis.text = element_text(size = 10),
    legend.text = element_text(size = 10),
    legend.title = element_text(size = 12),
    legend.key.size = unit(7, "mm")
  )

plot_Ashwini_ct <- plot_Ashwini_ct +
  theme_plots
plot_Ashwini_ct

plot_Jose1 <- plot_Jose1 +
  theme_plots
plot_Jose1

plot_Jose2 <- plot_Jose2 +
  theme_plots
plot_Jose2
```

## Optional - save plots


```{r}
#| echo=TRUE, eval=TRUE
ggsave( "../analysis/pictures/plot_Jose1a.png",
  limitsize = FALSE,
  units = c("px"), plot_Jose1,
  width = 2400, height = 1400, bg = "white"
)

# save in a different size
ggsave( "../analysis/pictures/plot_Jose1b.png",
  limitsize = FALSE,
  units = c("px"), plot_Jose2,
  width = 2400, height = 2000, bg = "white"
)

```

## Assemble figure with cowplot and patchwork

```{r}
#| echo=TRUE, eval=TRUE
library(png)
library(cowplot)
library(patchwork)

img1 <- readPNG("../analysis/pictures/plot_Jose1a.png")
img2 <- readPNG("../analysis/pictures/plot_Jose1b.png")

panel_JoseA <- ggdraw() + draw_image(img1)
panel_JoseB <- ggdraw() + draw_image(img2)

#define layout with textual representation
layout <- "
AB
CD"

#assemble multipanel figure based on layout
Figure_Jose <- panel_JoseA + panel_JoseB + plot_Jose1 + plot_Jose2 + 
  plot_layout(design = layout, heights = c(1, 1, 1, 1)) +
  plot_annotation(tag_levels = 'A') & 
  theme(plot.tag = element_text(size = 12, face='plain'))

#save figure as png and pdf
ggsave("../manuscript/figures/Figure_Jose.png", limitsize = FALSE, 
       units = c("px"), Figure_Jose, width = 4000, height = 2000,
       bg = "white")

ggsave("../manuscript/figures/Figure_Jose.pdf", limitsize = FALSE, 
       units = c("px"), Figure_Jose, width = 3000, height = 1600)


```





## Quarto

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.
