---
title: "Rstudio in Data Science and Paper Writing - Day 2"
author: "Gáspár Jékely"
format:
  revealjs: 
    theme: [default, custom.scss]
    slide-number: false
    code-fold: false
    code-summary: "Code"
    chalkboard: 
      buttons: false
    preview-links: auto
scrollable: true
---

## Course program

::: columns
::: {.column width="50%"}
### Day 1

<br>

-   **Part 1**: Why open science? Project management, data import, tidy data

-   12:30-13:30 lunch break

-   **Part 2**: Plotting, figure assembly
:::

::: {.column width="50%"}
### Day 2

<br>

-   **Part 3**: Figure assembly cont., tables, manuscript writing, data and figure embedding

-   12:30-13:30 lunch break

-   **Part 4**: GitHub, collaboration, sharing, version control
:::
:::

```{r eval=TRUE, echo=FALSE}
source("../analysis/scripts/packages_and_functions.R")
```

## More complex figure layouts

```{r}
#| echo=TRUE, eval=TRUE

#read images and make annotated panel
panel_Platy <- ggdraw() + draw_image(readPNG("../analysis/pictures/Platynereis_SEM_inverted_nolabel.png"))
panel_NOS <- ggdraw() + draw_image(readPNG("../analysis/pictures/HCR-IHC_51_AP_NOS_actub_56um.png"))
panel_FVRI <- ggdraw() + draw_image(readPNG("../analysis/pictures/FVRIa_rhoPhall_31h_200um.png"))
panel_Jose <- ggdraw() + draw_image(readPNG("../analysis/pictures/plot_Jose1b.png"))
panel_INNOS <- ggdraw() + draw_image(readPNG("../analysis/pictures/INNOS_synapses.png"))
panel_NIT <- ggdraw() + draw_image(readPNG("../analysis/pictures/IHC_55_AP_NITGC2_actub_61um.png"))
panel_DAF <- ggdraw() + draw_image(readPNG("../analysis/pictures/DAFFM.png"))
panel_model <- ggdraw() + draw_image(readPNG("../analysis/pictures/Magnitude_model_cPRC.png"))

#introduce gap in layout
layout <- "
AAAABBBBCCCC
AAAABBBBDDDD
############
EEEFFFGGGHHH
EEEFFFGGGHHH
"

#assemble multipanel figure based on layout
Figure_complex <- panel_Platy + panel_FVRI +  panel_NOS + 
  panel_NIT +
  panel_INNOS + panel_Jose + panel_DAF +
  panel_model +
  plot_layout(design = layout, heights = c(1, 1, 0.05, 1, 1)) +
  plot_annotation(tag_levels = 'A') & 
  theme(plot.tag = element_text(size = 12, face='plain'))

#save figure as png
ggsave(
  "../manuscript/figures/Figure_complex.png",
  units = c("px"), Figure_complex, 
  width = 2600, height = 1700, bg = "white"
  )

image_read("../manuscript/figures/Figure_complex.png")
```

## Tables

```{r}
#| echo=TRUE, eval=TRUE

#render built-in iris table with tinytable
tinytable::tt(head(iris))

#create some data
mydata <- tibble(
  gene = c("A", "B"),
  expression = c(1.1, 0.4)
  )

#render table
tt(mydata)

#read data
resources_table <- readxl::read_xls("../analysis/data/Key_resource_table.xls")

tt(
  resources_table, caption = "Key Resources Table", 
  theme = "grid", width = 1
  )

```

## Paper writing in Quarto/Rmarkdown

-   Powerful and versatile text editing with simple Markdown syntax or visual editor (similar to Word)

-   Easy insertion and formatting of references from the web or a .bib file

-   Supports equations, tables, code blocks

-   Directly insert your figures generated by your scripts in the same project

-   Can 'knit' into html, pdf or docx formats

-   -\> Open manuscript/Manuscript.qmd\]

## Quarto - Documentation

<br>

-   Quarto enables you to weave together content and executable code into a finished presentation.
-   To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

## The YAML header

- A YAML header contains YAML arguments, such as “title”, “author”, and “output”, demarcated by three dashes (-) on either end.
- When you create a new Quarto doc or presentation, it is created with a short YAML

```{r}
#| echo=TRUE, eval=FALSE
---
title: "Untitled"
format: html
---
  
```

- There is a more complex YAML in manuscript/Manuscript.qmd

```{r}
#| echo=TRUE, eval=FALSE

---
title: "New paper template"
subtitle: |
  \raggedright  Author 1^1,2,\*^ , Author 2^1,2^, Author 3^3^, Author 4E^4^ \newline<br>^1^Heidelberg University, Centre for Organismal Studies (COS), 69120 Heidelberg, Germany \newline<br>^2^Affiliation 2 \newline<br>^3^Affiliation 3 \newline<br>^4^Affiliation 4\newline<br>  ^\*^Correspondence: xy@cos.uni-heidelberg.de
mainfont: Arial
monofont: DejaVu Sans Mono #Times New Roman
fontsize: 11pt
linestretch: 1.2
linkcolor: blue
documentclass: article
crossref:
  fig-title: Figure     # (default is "Figure")
max-width: 100%
format:
  html: default
  pdf:
    pdf-engine: xelatex
    number-sections: false
    margin-left: 0.8in
    margin-right: 0.8in
    margin-top: 0.8in
    margin-bottom: 0.8in
    toc: true
    keep-tex: true
    include-in-header:
      text: |
        \usepackage{lineno}
    include-before-body:
      text: |
        \linenumbers
bibliography: references.bib #add bibliography in this file
csl: elife.csl #change according to journal
---
  
```



## Inserting references

<br>

-   In Visual mode, go to 'Insert' -\> 'Citation'
-   search for reference on pubmed etc.
-   'Insert' will add the ref to the bibliograpy.bib file
-   in 'Source' mode, you can directly insert the reference with [@ref_id] (preferred, faster method)
-   add new refs to your .bib file with the command-line command:

:\$ curl -LH "Accept: application/x-bibtex" https://doi.org/10.7554/eLife.34550 \>\> ./references.bib <br>

::: callout-warning
-   need to add references.bib to the YAML header as bibliography: references.bib
-   also define bibliography style in the YAML with csl: elife.csl #add .csl according to journal
:::

## Collaborative code and paper writing with Rstudio and GitHub

<br>

-   GitHub www.github.com is a platform for software development and version control
-   owned by Microsoft since 2018
-   developers can have public and private repositories
-   can share repositories privately with collaborators
-   integrates well with Rstudio
-   uses git protocol that is open source and also used by other code-hosting sites
-   we should have a COS/UniHD git site...

## The workflow

-   Create a new project or clone a template project on GitHub
-   In Rstudio, New Project -\> Version control -\> add GitHub repo URL and save locally
-   Change the code
-   You can 'commit' and then 'push' changes to GitHub
-   Your collaborators can be added on GitHub
-   Collaborators can 'pull' to their own computer and 'push' their own changes
-   If two developers push changes to the same repo, this can lead to conflict
-   This can be managed by starting new 'branches'
-   Branches can be 'merged' to the original 'master' branch
-   A collaborator can issue a 'pull request' to merge their branch to the master

## Collaborations - sharing and commenting

<br>

-   Adding comments directly to the Quarto file with "<!--# my comment -->" (these will not be knitted to the output)
- share as .docx and ask collaborators to use track changes (then why did we take this course...)
- collaborate on the same GitHub repository, use branches and pull requests (only makes sense if the collaborators are very involved)
- in principle you could use an Rproject for data, code and figures, and write text+refs on Gdocs+Paperpile or Overleaf+bib
- share commentable html through your github or other website
- we will use 'https://hypothes.is/' to add commenting functionality to an html 
- you need an account (easy and free)
- we use a https://github.com/hypothesis/client script that is sourced at the end of the quarto file by \<script src="hypothes.is/embed.js" async></script> to make this work

::: callout-warning
- if you re-render the html and overwrite the shared file, the comments will be gone
:::


